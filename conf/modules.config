/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/
params.container_version = "v0.1.2"


if (params.mode == "qc") {
    process {
        withLabel: 'process_high' { container = "quay.io/mondrianscwgs/hmmcopy:${params.container_version}" }
        withLabel: 'process_med' { container = "quay.io/mondrianscwgs/hmmcopy:${params.container_version}" }
        withLabel: 'process_low' { container = "quay.io/mondrianscwgs/hmmcopy:${params.container_version}" }
        withName: 'ALIGN|BAMMERGECELLS' { container = "quay.io/mondrianscwgs/alignment:${params.container_version}" }
        withName: 'HTMLREPORT|PLOTHEATMAP|ADDCLUSTERINGORDER|CONCATREADS|CONCATSEGMENTS|CONCATPARAMS|CONCATGCMETRICS|HMMTAR' {
            publishDir = [
                path: { "${params.output_dir}/" },
                mode: 'copy'
            ]
        }
        withName: 'BAMMERGECELLS|ALIGNTAR' {
            publishDir = [
                path: { "${params.output_dir}/" },
                mode: 'copy'
            ]
        }
    }
}

if (params.mode=="counthaps") {
    process {
        withLabel: 'process_high' { container = "quay.io/mondrianscwgs/haplotype_calling:${params.container_version}" }
        withLabel: 'process_med' { container = "quay.io/mondrianscwgs/haplotype_calling:${params.container_version}" }
        withLabel: 'process_low' { container = "quay.io/mondrianscwgs/haplotype_calling:${params.container_version}" }
        withName: 'CONCATALLELECOUNTS' {
            container = "quay.io/mondrianscwgs/haplotype_calling:${params.container_version}"
            publishDir = [
                path: { "${params.output_dir}/" },
                mode: 'copy'
            ]
        }
        withName: 'MONDRIAN:MONDRIAN_COUNTHAPS_PIPELINE:MONDRIAN_COUNTHAPS:SPLITBAM' {
            container = "quay.io/biocontainers/samtools:1.21--h50ea8bc_0"
        }
    }
}


if (params.mode=="inferhaps") {
    process {
        withLabel: 'process_high' { container = "quay.io/mondrianscwgs/haplotype_calling:${params.container_version}" }
        withLabel: 'process_med' { container = "quay.io/mondrianscwgs/haplotype_calling:${params.container_version}" }
        withLabel: 'process_low' { container = "quay.io/mondrianscwgs/haplotype_calling:${params.container_version}" }
        withName: 'CONCATCSV' {
            publishDir = [
                path: { "${params.output_dir}/" },
                mode: 'copy'
            ]
        }
    }
}


if (params.mode=="snv_genotyping") {
    process {
        withLabel: 'process_high' { container = "quay.io/mondrianscwgs/variant_calling:${params.container_version}" }
        withLabel: 'process_med' { container = "quay.io/mondrianscwgs/variant_calling:${params.container_version}" }
        withLabel: 'process_low' { container = "quay.io/mondrianscwgs/variant_calling:${params.container_version}" }
        withName: 'REGENERATEVARTRIXOUTPUTS|CONCATCSV|PYSAMGENOTYPER' {
            publishDir = [
                path: { "${params.output_dir}/" },
                mode: 'copy'
            ]
        }
    }
}


if (params.mode=="normalizer") {
    process {
        withLabel: 'process_high' { container = "quay.io/mondrianscwgs/alignment:${params.container_version}" }
        withLabel: 'process_med' { container = "quay.io/mondrianscwgs/alignment:${params.container_version}" }
        withLabel: 'process_low' { container = "quay.io/mondrianscwgs/alignment:${params.container_version}" }
        withName: 'SEPARATETUMORANDNORMALBAMS|ANEUPLOIDYHEATMAP|IDENTIFYNORMALS' {
            publishDir = [
                path: { "${params.output_dir}/" },
                mode: 'copy'
            ]
        }
    }
}



if (params.mode=="breakpoint") {
    process {
        withLabel: 'process_high' { container = "quay.io/mondrianscwgs/breakpoint_calling:${params.container_version}" }
        withLabel: 'process_med' { container = "quay.io/mondrianscwgs/breakpoint_calling:${params.container_version}" }
        withLabel: 'process_low' { container = "quay.io/mondrianscwgs/breakpoint_calling:${params.container_version}" }
        withName: 'EXTRACTSOMATIC|EXTRACTCOUNTS|DESTRUCT_TO_VCF|DESTRUCT|LUMPYEXPRESS|GRIDSS|SVABA|CSVERVEREMOVEDUPLICATES' {
            publishDir = [
                path: { "${params.output_dir}/" },
                mode: 'copy'
            ]
        }
    }
}


if (params.mode=="destruct") {
    process {
        withLabel: 'process_high' { container = "quay.io/mondrianscwgs/breakpoint_calling:${params.container_version}" }
        withLabel: 'process_med' { container = "quay.io/mondrianscwgs/breakpoint_calling:${params.container_version}" }
        withLabel: 'process_low' { container = "quay.io/mondrianscwgs/breakpoint_calling:${params.container_version}" }
        withName: 'EXTRACTSOMATIC|EXTRACTCOUNTS|DESTRUCT_TO_VCF|DESTRUCT' {
            publishDir = [
                path: { "${params.output_dir}/" },
                mode: 'copy'
            ]
        }
    }
}


if (params.mode=="variant") {
    process {
        withLabel: 'process_high' { container = "quay.io/mondrianscwgs/variant_calling:${params.container_version}" }
        withLabel: 'process_med' { container = "quay.io/mondrianscwgs/variant_calling:${params.container_version}" }
        withLabel: 'process_low' { container = "quay.io/mondrianscwgs/variant_calling:${params.container_version}" }
        withName: 'VCF2MAF|VARIANTCONSENSUS|REHEADER_MUSEQ|FILTERALIGNMENTARTIFACTS|REHEADER_STRELKA_SNV|REHEADER_STRELKA_INDEL' {
            publishDir = [
                path: { "${params.output_dir}/" },
                mode: 'copy',
                pattern: '*'
            ]
        }
    }
}
